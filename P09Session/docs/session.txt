
-Ambito de datos de Sesion y Datos Flash

--Que tan diferente es eso en Play Framework

Si tienes que guardar datos a traves de mltiples petitorios HTTP, tu no debes guardarlos 
en una sesion de usuario o en el ambito de datos Flash.
Los datos almacenados en sessiones estan disponibles en la sesion de usuario, 
y los datos almacenados en el ambito flash estaran solo disponibles en el siguiente petitorio.

Es importante entender que las Sessiones y los datos Flash no son almacenadas en el servidor 
pero si son agregados a cada petitorio HTTP subsecuente, usando cookies.

Esto significa que los datos tienen un tama√±o limitado de (hasta 4kb)
y que se debe almacenar valores en formato cadena.
Las cookies estan firmadas con una clave secreta que no se puede modificar los 
datos de la cookie (o se invalidara la data).

La sesion de play no esta intentando usar la cache.
Si se necesita la cache para almacenar datos relacionados a un sesion especifica,
se puede usar cache del mecanismo de Play framework, y se usa la sesion 
para almacenar un id unico para la data de la cache asociada con un usuario especifico.

--Configuracion de la session
Para poder configurar la session en Play Framework es necesario 
hacer uso del archivo application.conf.
Por defecto, no hay un timeout fijo para las sesiones.
La sesion expira cuando el usuario cierra el navegador.
Si se necesita un timeout funcional para una aplicacion especifica ,
se tiene que establecer un tiempo maximo de vida para la session de la cookie 
por medio de la configuracion de la clave play.http.session.maxAge en application.conf,
y se pondra tambien en play.http.session.jwt.expiresAfter el mismo valor.
La propiedad maxAge sera removida la cookie del navegador, 
y el JWT sera establecido en la cookie, se volvera invalido despues del tiempo dado.

--Almacenando informacion en la session

Como la sesion es solo una cookie, tambien se puede usar por medio de HTTP Header,
pero Play framework provee un metodo helper para almacenar el valor de una session:

public Result login() {
    session("connected", "user@gmail.com");
    return ok("Welcome!");
}

La misma forma que se remueve algun valor de la session:

public Result logout() {
    session().remove("connected");
    return ok("Bye");
}

--Leyendo un valor de la sesion 

Se puede recuperar datos de la sesion por medio de la lectura del header HTTP:


public Result index() {
    String user = session("connected");
    if(user != null) {
        return ok("Hello " + user);
    } else {
        return unauthorized("Oops, you are not connected");
    }
}

--Descartar los datos de toda la sesion

Si se desea descartar todos los datos se usa un solo metodo:

public Result logout() {
    session().clear();
    return ok("Bye");
}

--Ambito de datos Flash

El ambito de sesiones flash trabaja como funcionaria una sesion normal 
pero solo tiene dos diferencias:

    * los datos son guardados solo bajo un petitorio.
    * la cookie flash no es firmada, haciendo posible que el usuario la modifique.
    Nota .- el ambito de sesiones flash deberia solo ser usado para transportar mensajes de error o exito 
    en transacciones no ajax. 
    Como la data que se usa solo en el petitorio siguiente y para cuando no hay garantias 
    que el pedido es parte de una aplicacion web compleja , 
    el ambito de las sesions flash es sujeto de varias condiciones para su correcto funcionamiento.

Asi por ejemplo, despues de guardar un elemento, se debe querer guardar la redireccion que regresa a la pagina index,
y se podria querer mostrar un mensaje en la pagina index diciendo que se guardo datos exitosamente.
En la accion de guardar se deberia agregar un mensaje de exito en el ambito flash:


public Result save() {
    flash("success", "The item has been created");
    return redirect("/home");
}

Luego la accion index, se deberia evaluar si el mensaje de exito existe en el ambito flash, y si es asi se muestra el mensaje:

public Result index() {
    String message = flash("success");
    if(message == null) {
        message = "Welcome!";
    }
    return ok(message);
}

Un valor flash es tambien automaticamente disponible en plantillas Twirl.
Por ejm:

@if(flash.containsKey("success")) {
  @flash.get("success")
} else {
  Welcome!
}