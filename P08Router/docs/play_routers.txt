-Rutas Http

--Router Http 

El routeador es el componente que traduce cada petitorio http entrante a una llamada de accion (un metodo publico de controlador)

Un pedido HTTP fue visto asi como un evento por el framework MVC. Este evento contiene dos mayores partes de informacion:

    El path de pedido de datos (tal  como /clentes/1432, /fotos/lista ) incluyendo la consulta.
    El metodo HTTP (GET, POST , etc).

Las rutas son definidas en el archivo de configuracion de rutas conf/routes, lo cual es compilado. 
Esto significa que se vera los errores de ruta directamnete en el navegador.

--Inyeccion de dependencias
las rutas por defecto de play son del generador de proyecto que acepta instancias del controlador en el constructor de un  @Inject-annotated. 
Eso significa que la clase es acondicionable para el uso de la inyeccion de dependencias y puede tambien ser instanciado manualmente 
usando el constructor.

Play tambien viene con rutas estaticas heredadas de las rutas del generador que declara acciones como metodos estaticos.
Esto es generalmente no recomendado por que rompe la encapsulacion, que hace el codigo menos testeable, y sus nuevas apis menos compatibles.

Si se necesita rutas estaticas, se puede cambiar a el generador de rutas estaticas añadiendo la configuracion del  archivo build.sbt.

routesGenerator := StaticRoutesGenerator

Las muestras de codigo en la documentacion de play framework asume que se esta usando el genrador de inyeccion de rutas.
Si no se esta usando esto, se puede adaptar de modo trivial adaptando el codigo de los ejemplos usando el generador de rutas estaticas del generador, de modo que 
que se usa prefijando el controlador de parte de la invocacion de la ruta con un simbolo  @, 
o por medio de la declaracion de cada metodo accion de forma estatica.

--La sintaxis del archivo de rutas

el archivo de configuracion conf/routes es usado por el router.

Este archivo enlista todas las rutas necesarias para la applicacion,

Cada ruta consiste de un metodo HTTP y un patron URI asociado con la llamada al metodo de accion.

Vamos a ver lo que la definicion de rutas como luce:

GET   /clients/:id          controllers.Clients.show(id: Long)

Nota .- en la llamada de accion, el parametro de tipo de dato viene despues del nombre del parametro, como en scala.

Cada ruta inicia con el metodo HHTP, seguido del patron URI. 
El ultimo elemento de un ruta es la definicion de la llamada.

Se puede tambien agregar comentarios al archivo de rutas, con el caracter #:

# Mostrar cliente
GET   /clients/:id          controllers.Clients.show(id: Long)

--Metodo HHTP
El metodo HHTp puede ser alguno de los metodos validos soportados por HTTP (GET, PATCH, POST, PUT, DELETE, HEAD, OPTIONS).

--El patron URI

El patron URI define el la ruta de el petitorio.

Algunas partes de la ruta de petitorios  puede ser dinamica:

--Ruta estatica

Por ejemplo, una coincidencia exacta GET /clients/all de los petitorios de entrada, se puede definir esta ruta de la siguiente forma:

GET   /clients/all          controllers.Clients.list()

-- Partes dinamicas


Si tu deseas definir una ruta que pueda recuperar un cliente basado en id, se necesita agregar una parte dinamica:

GET   /clients/:id          controllers.Clients.show(id: Long)

Nota .- Un patron URI puede tener mas de una parte dinamica.

La estrategia por defecto para las partes dinamicas es definido por la expresion regular [^/]+,
significando que alguna parte dinamica es definida como  :id conincidira exactamente con un segmento de ruta URI.
De modo que los otros tipos de patrones, segmentos de ruta son automaticamente decodificados de la ruta, 
antes de ser pasado al controlador, y codificado en la ruta reversa.


--Partes dinamicas divididas por /

Si se desea una parte dinamica para capturar mas de un segmento de ruta URI, 
separado por slashes, se puede definir una parte dinamica usando la sintaxis *id, 
tambien conocido como patron wildcard, las cuales usan la exprresion regular  .* :

GET   /files/*name          controllers.Application.download(name)

Aqui para cada petitorio como  GET /files/images/logo.png, la parte dinamica se denomina asi para capturar por valor el string  images/logo.png.

se debe tomar nota de que las partes dinamicas se dividen varias veces con / no son decodificadas por el router o codificadas por el router reverso
Esto es responsabilidad de validar el segmento URI tal como se haria por entrada de usuario.
El router reverso simplemente hace una concatenacion de cadenas de caracteres, de modo que se necesitara asegurarse que las rutas son validas y  en caso no lo sean,
por ejemplo algunas contienes slashes o caracteres no ASCII.

Partes Dinamicas con espresiones regulares pwersonalizadas
Se puede tambien definir nuestras propias expresiones regulares segun las rutas dinamicas, usando sintaxis de expresiones regulares como $id<regex> :

GET   /items/$id<[0-9]+>    controllers.Items.show(id: Long)

Justo como con las rutas con wildcard, el parametro no es decodificado por el router o codificado por el router reverso.
Uno se hace responsable por validar los datos ingresados para asegurarte que tenga sentido en tal contexto.

Es tambien posible aplicar mfificadores por medio de predecer a la ruta con una linea comenzando con un +.
Este cambio produce un comportamiento segun cada componente de Play Framework.
Uno de tales modificadores es el modificador “nocsrf” para evitar el filtro CSRF:

+ nocsrf
POST  /api/new              controllers.Api.newThing()


--Lamada a el metodo generador de accion

La ultima parte de una definicion de ruta es la llamada.

Esta parte debe definir una llamada valida a un metodo de accion.

Si el metodo no define ningun parametro, solo da el nombre ampliamente calificado:

GET   /                     controllers.Application.homePage()

Si el metodo de accion define los parametros, el parametro correspondiente de los valores sera buscado en el petitorio URI, o extraido desde la ruta URI
a si mismo o desde la conculta de la cadena de caracteres.


# Extraer el parametro de pagina desde la ruta
# i.e. http://myserver.com/index
GET   /:page                controllers.Application.show(page)

Or:

# Extraer el parametro de pagin desde la conculta de cadena de caracteres
# i.e. http://myserver.com/?page=index
GET   /                     controllers.Application.show(page)

Aqui esta el metodo mostrado correpondiente a la definicion del controlador controllers.Application:
Here is the corresponding show method definition in the controllers.Application controller:

public Result show(String page) {
    String content = Page.getContentOf(page);
    return ok(content).as("text/html");
}

--Tipos de parametro

Para los parametros del tipo de cadena, el tipo de parametro es opcional.
Si tu deseas que Play framework transforma el parametro de entrada en un especifico tipo Scala, se puede agregar un tipo explicito:

GET   /clients/:id          controllers.Clients.show(id: Long)

Luego usar el mismo tipo para la correspondiente parametro del metodo de accion en el controlador:

public Result show(Long id) {
    Client client = clientService.findById(id);
    return ok(views.html.Client.show(client));
}

Nota.- los tipos de parametro son especificados usando una sintaxis de sufijo.
Tambien los tipos genericos son especificados usando los simbolos [] o <> como en Java
Por ejemplo: 
List[String] es el mismo tipo como en Java List<String>.

--Parametros con valores fijos 

Algunas veces se deseara un valor fijo para un parametro:

# Extraer el parametro de pagina desde la ruta o fijar el valor por medio de /
GET   /                     controllers.Application.show(page = "home")
GET   /:page                controllers.Application.show(page)

--Parametros con valores por defecto
Se puede tambien proveer un valor por defecto que sera usado si no hay un valor encontrado en el petitorio de entrada:

# Pagination links, like /clients?page=3
GET   /clients              controllers.Clients.list(page: Int ?= 1)

--Parametros opcionales

También se puede especificar un parámetro opcional que no tiene que estar presente en todas las solicitudes:

# The version parameter is optional. E.g. /api/list-all?version=3.0
GET   /api/list-all         controllers.Api.list(version ?= null)
--Ruteo prioritario


Muchas rutas pueden emparejar la misma solicitud. Si hay un conflicto, la primera ruta (en el pedido de la declaración) se usa.

--Ruteo Reverso


El direccionador puede ser usado para generar un URL desde dentro de una llamada de metodo Java. 
Esto hace posible centralizar todos sus rutas URI en un archivo de configuración solo,
 por tanto puede ser más exacto cuando se da una nueva factorización su aplicación.

Para cada controlador usado en el archivo de rutas, 
el ruteador generará a un "router inverso" en el paquete de rutas, 
teniendo los mismos métodos de acción, con la misma firma, pero devolviendo un play.mvc.Call en vez de un play.mvc.Result.

El play.mvc.Call define una llamada del HTTP y proporciona tanto el método del HTTP como el URI.

Por ejemplo, si crea a un controlador como:

package controllers;

import play.*;
import play.mvc.*;

public class Application extends Controller {

    public Result hello(String name) {
        return ok("Hello " + name + "!");
    }

}

Y Si se detecta en el archivo de conf/routes:

# Hello action
GET   /hello/:name          controllers.Application.hello(name)

Puede invertir entonces el URL al método hello de acción, usando el controllers.routes.Controller inverso de la aplicación:

// Redirect to /hello/Bob
public Result index() {
    return redirect(controllers.routes.Application.hello("Bob"));
}




    Note: There is a routes subpackage for each controller package. So the action controllers.Application.hello can be reversed via controllers.routes.Application.hello (as long as there is no other route before it in the routes file that happens to match the generated path).

The reverse action method works quite simply: it takes your parameters and substitutes them back into the route pattern. In the case of path segments (:foo), the value is encoded before the substitution is done. For regex and wildcard patterns the string is substituted in raw form, since the value may span multiple segments. Make sure you escape those components as desired when passing them to the reverse route, and avoid passing unvalidated user input.
Relative routes

There are instances where returning a relative route instead of an absolute may be useful. The routes returned by play.mvc.Call are always absolute (they lead with a /), which can lead to problems when requests to your web application are rewritten by HTTP proxies, load balancers, and API gateways. Some examples where using a relative route would be useful include:

    Hosting an app behind a web gateway that prefixes all routes with something other than what is configured in your conf/routes file, and roots your application at a route it’s not expecting.
    When dynamically rendering stylesheets, you need asset links to be relative because they may end up getting served from different URLs by a CDN.

To be able to generate a relative route you need to know what to make the target route relative to (the start route). The start route can be retrieved from the current RequestHeader. Therefore, to generate a relative route it’s required that you pass in your current RequestHeader or the start route as a String parameter.

For example, given controller endpoints like:

package controllers;

import play.*;
import play.mvc.*;

public class Relative extends Controller {

    public Result helloview() {
        ok(views.html.hello.render("Bob", request()));
    }

    public Result hello(String name) {
        return ok("Hello " + name + "!");
    }

}

    Note: The current request is passed to the view template by calling request()

And if you map it in the conf/routes file:

GET     /foo/bar/hello              controllers.Relative.helloview
GET     /hello/:name                controllers.Relative.hello(name)

You can then define relative routes using the reverse router as before and include an additional call to relativeTo(play.mvc.RequestHeader requestHeader):

@(name: String, request: Http.RequestHeader)

<h1>Hello @name</h1>

<a href="@routes.Relative.hello(name)">Absolute Link</a>
<a href="@routes.Relative.hello(name).relativeTo(request)">Relative Link</a>

    Note: The Http.Request passed from the controller is cast to a Http.RequestHeader in the view parameters.

When requesting /foo/bar/hello the generated HTML will look like so:

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Bob</title>
    </head>
    <body>
      <a href="/hello/Bob">Absolute Link</a>
      <a href="../../hello/Bob">Relative Link</a>
    </body>
</html>

The Default Controller

Play includes a Default controller which provides a handful of useful actions. These can be invoked directly from the routes file:

# Redirects to https://www.playframework.com/ with 303 See Other
GET   /about      controllers.Default.redirect(to = "https://www.playframework.com/")

# Responds with 404 Not Found
GET   /orders     controllers.Default.notFound

# Responds with 500 Internal Server Error
GET   /clients    controllers.Default.error

# Responds with 501 Not Implemented
GET   /posts      controllers.Default.todo

In this example, GET / redirects to an external website, but it’s also possible to redirect to another action (such as /posts in the above example).
